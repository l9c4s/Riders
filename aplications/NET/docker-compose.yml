services:
  tests:
    build:
      context: ./Backand
      dockerfile: Dockerfile.tests
    image: riders_tests
    container_name: riders_tests
    environment:
      ASPNETCORE_ENVIRONMENT: Testing
      # Use vari√°veis de ambiente em vez de hardcode
    volumes:
      - ./testresults:/testresults
    networks:
      - applications  
      - production
      - monitoring
      - databases
    restart: "no"

  riders:
    build:
      context: ./Backand
      dockerfile: Dockerfile
    image: riders_image
    container_name: riders_API
    ports:
      - "8080:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: "http://+:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.riders.rule=Host(`api.riders.lat`)"
      - "traefik.http.routers.riders.entrypoints=websecure"
      - "traefik.http.routers.riders.tls=true"
      - "traefik.http.routers.riders.tls.certresolver=letsencrypt"
      - traefik.http.services.riders.loadbalancer.server.port=8080
      - "traefik.docker.network=production"
    networks:
      - applications  
      - production
      - monitoring
      - databases
    mem_limit: 4g
    cpus: '1'
    depends_on:
      tests:
        condition: service_completed_successfully
    restart: unless-stopped
    # Adicionar health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  applications:
    external: true
    name: applications
  production:
    external: true
    name: production
  monitoring: 
    external: true
    name: monitoring
  databases:
    external: true
    name: databases

volumes:
  testresults: